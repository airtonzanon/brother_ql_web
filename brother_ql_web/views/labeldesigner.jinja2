{% extends "base.jinja2" %}

{% block page_title %}
    Label Designer
{% endblock %}

{% block content %}
    <div class="row g-4" style="margin-top: 1.5em;">
        <!-- Left: Label Settings -->
        <div class="col-lg-3 col-md-4">
            <div class="card mb-4">
                <div class="card-header"><span class="bi-gear"></span> Label Settings</div>
                <div class="card-body">
                    <label for="labelSize">Label Size</label>
                    <select class="form-control mb-2" id="labelSize" onChange="preview()">
                        {% for label_size in label_sizes %}<option value="{{label_size[0]}}" {% if label.default_size == label_size[0] %}selected{% endif %}>{{label_size[1]}}</option>{% endfor %}
                    </select>
                    <label for="orientation">Orientation</label>
                    <div class="btn-group w-100 mb-2" role="group">
                        <input type="radio" class="btn-check" name="orientation" id="orientationStandard" value="standard" autocomplete="off" onchange="preview()" {% if default_orientation == 'standard' %}checked{% endif %}>
                        <label class="btn btn-outline-secondary" for="orientationStandard">Standard</label>
                        <input type="radio" class="btn-check" name="orientation" id="orientationRotated" value="rotated" autocomplete="off" onchange="preview()" {% if default_orientation == 'rotated' %}checked{% endif %}>
                        <label class="btn btn-outline-secondary" for="orientationRotated">Rotated</label>
                    </div>
                    <label for="fontFamily">Font Family</label>
                    <select class="form-control mb-2" id="fontFamily" onChange="preview()">
                        {% for font_family_name in font_family_names %}
                            {% for font_style in fonts[font_family_name].keys() %}
                        <option {% if label.default_font.style == font_style and label.default_font.family == font_family_name %}selected{% endif %}>{{font_family_name}} ({{ font_style }})</option>
                            {% endfor %}
                        {% endfor %}
                    </select>
                    <label for="fontSize">Font Size</label>
                    <input id="fontSize" class="form-control mb-2" type="number" min="1" value="{{ label.default_font_size }}" onChange="preview()" required>
                    <label>Font Alignment</label>
                    <div class="btn-group w-100 mb-2" role="group">
                        <input type="radio" class="btn-check" name="fontAlign" id="alignLeft" value="left" autocomplete="off" onchange="preview()">
                        <label class="btn btn-outline-secondary" for="alignLeft"><span class="bi-text-left"></span></label>
                        <input type="radio" class="btn-check" name="fontAlign" id="alignCenter" value="center" autocomplete="off" onchange="preview()" checked>
                        <label class="btn btn-outline-secondary" for="alignCenter"><span class="bi-text-center"></span></label>
                        <input type="radio" class="btn-check" name="fontAlign" id="alignRight" value="right" autocomplete="off" onchange="preview()">
                        <label class="btn btn-outline-secondary" for="alignRight"><span class="bi-text-right"></span></label>
                    </div>
                    <label>Vertical Alignment</label>
                    <div class="btn-group w-100 mb-2" role="group">
                        <input type="radio" class="btn-check" name="fontVerticalAlign" id="valignTop" value="top" autocomplete="off" onchange="preview()">
                        <label class="btn btn-outline-secondary" for="valignTop"><span class="bi-arrow-up"></span></label>
                        <input type="radio" class="btn-check" name="fontVerticalAlign" id="valignCenter" value="center" autocomplete="off" onchange="preview()" checked>
                        <label class="btn btn-outline-secondary" for="valignCenter"><span class="bi-arrow-down-up"></span></label>
                        <input type="radio" class="btn-check" name="fontVerticalAlign" id="valignBottom" value="bottom" autocomplete="off" onchange="preview()">
                        <label class="btn btn-outline-secondary" for="valignBottom"><span class="bi-arrow-down"></span></label>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <label for="marginTop">Margin Top</label>
                            <input id="marginTop" class="form-control mb-2" type="number" min="0" max="200" value="24" onChange="preview()" required>
                        </div>
                        <div class="col-6">
                            <label for="marginBottom">Margin Bottom</label>
                            <input id="marginBottom" class="form-control mb-2" type="number" min="0" max="200" value="45" onChange="preview()" required>
                        </div>
                        <div class="col-6">
                            <label for="marginLeft">Margin Left</label>
                            <input id="marginLeft" class="form-control mb-2" type="number" min="0" max="200" value="35" onChange="preview()" required>
                        </div>
                        <div class="col-6">
                            <label for="marginRight">Margin Right</label>
                            <input id="marginRight" class="form-control mb-2" type="number" min="0" max="200" value="35" onChange="preview()" required>
                        </div>
                    </div>
                    <label for="labelCount">Label Count</label>
                    <input id="labelCount" class="form-control mb-2" type="number" min="1" max="200" value="1" required>
                    <div class="form-check mt-2">
                        <input class="form-check-input" type="checkbox" name="highQuality" id="highQuality" onchange="preview()" checked="checked">
                        <label class="form-check-label" for="highQuality">High Quality</label>
                    </div>
                </div>
            </div>
        </div>
        <!-- Center: Preview -->
        <div class="col-lg-6 col-md-8 order-lg-2 order-md-2 order-1 d-flex flex-column align-items-center">
            <div class="card mb-4 w-100" style="max-width: 500px; margin: 0 auto;">
                <div class="card-header"><span class="bi-eye"></span> Label Preview</div>
                <div class="card-body d-flex flex-column align-items-center">
                    <img id="previewImg" style="border: 1px solid #444; max-height: 350px; width: auto; max-width: 100%; margin-bottom: 10px; background: #fff;" />
                    <p class="mb-1">Printed size w/o margins: <span id="labelWidth">?</span> cm x <span id="labelHeight">?</span> cm</p>
                </div>
            </div>
            <div class="card card-default w-100" style="max-width: 500px; margin: 0 auto;">
                <div class="card-header"><span class="bi-journal"></span> Status</div>
                <div id="statusPanel" class="card-body">
                    - undefined -
                </div>
            </div>
        </div>
        <!-- Right: Input & Actions -->
        <div class="col-lg-3 col-md-12 order-lg-3 order-md-3 order-2">
            <div class="card mb-4">
                <div class="card-header"><span class="bi-pencil"></span> Label Content</div>
                <div class="card-body">
                    <label for="labelText">Label Text</label>
                    <textarea rows="7" id="labelText" class="form-control mb-2" onChange="preview()" onInput="preview()"></textarea>
                    <label for="labelImage" style="margin-top: 1em;">Or select an image to print:</label>
                    <input type="file" id="labelImage" class="form-control mb-2" accept="image/*">
                    <div class="d-grid gap-2 mt-3">
                        <button id="previewImageButton" type="button" class="btn btn-info btn-lg mb-2" onClick="previewImage()">
                            <span class="bi-eye"></span> Preview Image
                        </button>
                        <button id="printImageButton" type="button" class="btn btn-secondary btn-lg mb-2" onClick="printImage()">
                            <span class="bi-image"></span> Print Image
                        </button>
                        <button id="printButton" type="button" class="btn btn-primary btn-lg" onClick="print()">
                            <span class="bi-printer-fill"></span> Print Text
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascript %}
    function getValue(id) {
        return document.getElementById(id).value;
    }

    function getSelectedOption(id) {
        const selection = document.getElementById(id);
        return selection.options[selection.selectedIndex].value;
    }

    function getSelectedRadioButton(name, fallback) {
        const selector = document.querySelector('input[name="' + name + '"]:checked');
        if (!selector) {
            return fallback;
        }
        return selector.value;
    }

    function isChecked(id) {
        return document.getElementById(id).checked;
    }

    function buildImageFormData(imageFile) {
        const labelSize = getSelectedOption('labelSize');
        const orientation = getSelectedRadioButton('orientation', 'standard');
        const marginTop = getValue('marginTop');
        const marginBottom = getValue('marginBottom');
        const marginLeft = getValue('marginLeft');
        const marginRight = getValue('marginRight');
        const labelCount = getValue('labelCount');
        const highQuality = isChecked('highQuality');
        const verticalAlign = getSelectedRadioButton('fontVerticalAlign', 'center');

        const formData = new FormData();
        formData.append('image', imageFile);
        formData.append('label_size', labelSize);
        formData.append('orientation', orientation);
        formData.append('margin_top', marginTop);
        formData.append('margin_bottom', marginBottom);
        formData.append('margin_left', marginLeft);
        formData.append('margin_right', marginRight);
        formData.append('label_count', labelCount);
        formData.append('high_quality', highQuality);
        formData.append('vertical_align', verticalAlign);
        return formData;
    }

    function makeImageRequest(url, formData, onSuccess, onError) {
        const request = new XMLHttpRequest();
        request.addEventListener('load', onSuccess);
        request.addEventListener('error', onError);
        request.open('POST', url);
        request.send(formData);
    }

    function formData() {
        var text = getValue('labelText');
        if (text == '') {
            text = ' ';
        }
        const fontFamily = getSelectedOption('fontFamily');
        const fontSize = getValue('fontSize');
        const labelSize = getSelectedOption('labelSize');
        const align = getSelectedRadioButton('fontAlign', 'center');
        const orientation = getSelectedRadioButton('orientation', 'standard');
        const marginTop = getValue('marginTop');
        const marginBottom = getValue('marginBottom');
        const marginLeft = getValue('marginLeft');
        const marginRight = getValue('marginRight');
        const labelCount = getValue('labelCount');
        const highQuality = isChecked('highQuality');
        const verticalAlign = getSelectedRadioButton('fontVerticalAlign', 'center');

        const data = new FormData();
        data.append('text', text);
        data.append('font_family', fontFamily);
        data.append('font_size', fontSize);
        data.append('label_size', labelSize);
        data.append('align', align);
        data.append('orientation', orientation);
        data.append('margin_top', marginTop);
        data.append('margin_bottom', marginBottom);
        data.append('margin_left', marginLeft);
        data.append('margin_right', marginRight);
        data.append('label_count', labelCount);
        data.append('high_quality', highQuality);
        data.append('vertical_align', verticalAlign);
        return data;
    }

    function setPreviewImage(response) {
        const img = document.getElementById('previewImg');
        img.setAttribute('src', 'data:image/png;base64,' + response.response);
        img.onload = function() {
            document.getElementById('labelWidth').innerHTML = (img.naturalWidth / 300 * 2.54).toFixed(1);
            document.getElementById('labelHeight').innerHTML = (img.naturalHeight /300 * 2.54).toFixed(1);
        };
    }

    function preview() {
        const marginsTopBottom = document.getElementsByClassName('marginsTopBottom');
        const marginsLeftRight = document.getElementsByClassName('marginsLeftRight');

        function enable(elements) {
            for (const element of elements) {
                element.removeAttribute('disabled');
                element.removeAttribute('title');
            }
        }

        function disable(elements, orientation) {
            for (const element of elements) {
                element.disabled = true;
                element.setAttribute('title', 'Only relevant if ' + orientation + ' orientation is selected.');
            }
        }

        if (getSelectedRadioButton('orientation', 'standard') == 'standard') {
            enable(marginsTopBottom);
            disable(marginsLeftRight, 'rotated');
        } else {
            enable(marginsLeftRight);
            disable(marginsTopBottom, 'standard');
        }

        const request = new XMLHttpRequest();
        request.addEventListener('load', function() {
            setPreviewImage(this);
        });
        request.open('POST', '/api/preview/text?return_format=base64');
        request.setRequestHeader('Accept', 'application/x-www-form-urlencoded; charset=UTF-8');
        request.send(formData());
    }

    function setStatus(data) {
        if (data.success) {
            document.getElementById('statusPanel').innerHTML = '<div id="statusBox" class="alert alert-success" role="alert"><i class="bi-check-square"></i><span>Printing was successful.</span></div>';
        } else {
            /* TODO: https://developer.mozilla.org/en-US/docs/Web/API/Element/setHTML#browser_compatibility */
            document.getElementById('statusPanel').innerHTML = '<div id="statusBox" class="alert alert-warning" role="alert"><i class="bi-exclamation-triangle-fill"></i><span>Printing was unsuccessful:<br />' + data.message + '</span></div>';
        }
        document.getElementById('printButton').removeAttribute('disabled');
    }

    function print() {
        document.getElementById('printButton').setAttribute('disabled', true);
        document.getElementById('statusPanel').innerHTML = '<div id="statusBox" class="alert alert-info" role="alert"><i class="bi-hourglass"></i><span>Processing print request...</span></div>';

        const request = new XMLHttpRequest();
        request.addEventListener('load', function() {
            setStatus(JSON.parse(this.response));
        });
        request.addEventListener('error', function() {
            setStatus(JSON.parse(this.response));
        });
        request.open('POST', '/api/print/text');
        request.setRequestHeader('Accept', 'application/x-www-form-urlencoded; charset=UTF-8');
        request.send(formData());
    }

    function printImage() {
        const imageInput = document.getElementById('labelImage');
        if (!imageInput.files || imageInput.files.length === 0) {
            alert('Please select an image file to print.');
            return;
        }

        const formData = buildImageFormData(imageInput.files[0]);
        document.getElementById('printImageButton').setAttribute('disabled', true);
        document.getElementById('statusPanel').innerHTML = '<div id="statusBox" class="alert alert-info" role="alert"><i class="bi-hourglass"></i><span>Processing image print request...</span></div>';

        makeImageRequest(
            '/api/print/image',
            formData,
            function() {
                setStatus(JSON.parse(this.response));
                document.getElementById('printImageButton').removeAttribute('disabled');
            },
            function() {
                setStatus({success: false, message: 'Network error'});
                document.getElementById('printImageButton').removeAttribute('disabled');
            }
        );
    }

    function previewImage() {
        const imageInput = document.getElementById('labelImage');
        if (!imageInput.files || imageInput.files.length === 0) {
            alert('Please select an image file to preview.');
            return;
        }

        const formData = buildImageFormData(imageInput.files[0]);
        makeImageRequest(
            '/api/preview/image?return_format=base64',
            formData,
            function() {
                setPreviewImage({response: this.responseText});
            },
            function() {
                alert('Error loading preview');
            }
        );
    }

    preview();

{% endblock %}
